import { Meeting, Prisma, User } from '@prisma/client';
import { InjectBot, Start, Update, Action, Command } from 'nestjs-telegraf';
import { message } from 'telegraf/filters';
import { Context, Telegraf, Markup } from 'telegraf';
import { ZoomService } from './zoom.service';
import { PrismaService } from './prisma/prisma.service';
require('dotenv').config();

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private zoomService: ZoomService,
    private prisma: PrismaService,
  ) {}
  private readableDate: number;
  private requestMeetToChatId: number;
  private rawDate: string;
  private requestMeetFrom: any;
  private monthArr = [
    '—è–Ω–≤–∞—Ä—è',
    '—Ñ–µ–≤—Ä–∞–ª—è',
    '–º–∞—Ä—Ç–∞',
    '–∞–ø—Ä–µ–ª—è',
    '–º–∞—è',
    '–∏—é–Ω—è',
    '–∏—é–ª—è',
    '–∞–≤–≥—É—Å—Ç–∞',
    '—Å–µ–Ω—Ç—è–±—Ä—è',
    '–æ–∫—Ç—è–±—Ä—è',
    '–Ω–æ—è–±—Ä—è',
    '–¥–µ–∫–∞–±—Ä—è',
  ];
  private isFirstRequest: boolean;
  private isSecondRequest: boolean;
  private isMeetingTheme: boolean;
  private isOfflineMeeting: boolean;
  private isGeneralMeetingTheme: boolean;
  private isGeneralMeetingDate: boolean;
  private meetingTheme: string;
  private generalMeetingTheme: string;
  private generalMeet: Meeting;

  @Action('start')
  @Command('start')
  @Start()
  async startCommand(ctx: Context) {
    const chat = await ctx.getChat();
    const from = ctx.message && ctx.message.from.first_name;

    await this.bot.telegram.sendMessage(
      chat.id,
      from
        ? `–ü—Ä–∏–≤–µ—Ç, ${from} üëã —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ EVO-controls.`
        : '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ',
      Markup.inlineKeyboard([
        // [Markup.button.callback(`–î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥`, 'addLead')],
        // [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É', 'addDeal')],
        [Markup.button.callback('–°–æ–≤–µ—â–∞–Ω–∏—è', 'meetings')],
        // [
        //   Markup.button.callback(
        //     '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–±–æ—Ä–∫–µ',
        //     'getProjectStatus',
        //   ),
        // ],
        // [Markup.button.callback('–ó–∞–ø—Ä–æ—Å —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –∑–∞–ø–∞—Å–∞', 'getStorage')],
        [Markup.button.callback('–ó–∞–ø—Ä–æ—Å ID —á–∞—Ç–∞', 'getChatID')],
      ]),
    );
  }

  @Command('getchatid')
  @Action('getChatID')
  async getChatID(ctx: Context) {
    const chat = await ctx.getChat();
    await this.bot.telegram.sendMessage(chat.id, `–í–∞—à ID —á–∞—Ç–∞: ${chat.id}`);
  }

  @Command('addlead')
  @Action('addLead')
  async addLead(ctx: Context) {
    const chat = await ctx.getChat();

    await this.bot.telegram.sendMessage(
      chat.id,
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞: ',
      Markup.inlineKeyboard([
        [Markup.button.callback(`–ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä`, 'addPartner')],
        [Markup.button.callback(`–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–µ—á–Ω–∏–∫`, 'addCorporate')],
        [Markup.button.callback(`–ß–∞—Å—Ç–Ω—ã–π –∫–æ–Ω–µ—á–Ω–∏–∫`, 'addPartial')],
        [Markup.button.callback(`–ù–∞–∑–∞–¥`, 'start')],
      ]),
    );
  }

  @Action('addPartner')
  async sendFeedback(ctx: Context) {
    const chat = await ctx.getChat();

    await this.bot.telegram.sendMessage(
      chat.id,
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: ',
      Markup.inlineKeyboard([
        [Markup.button.callback(`–ù–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä`, 'addIntegrator')],
        [Markup.button.callback(`–ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç`, 'addAgent')],
        [Markup.button.callback(`–ù–æ–≤—ã–π –¥–∏–ª–µ—Ä`, 'addDealer')],
        [Markup.button.callback(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é`, 'addIntegration')],
        [Markup.button.callback(`–ù–∞–∑–∞–¥`, 'addLead')],
      ]),
    );
  }

  @Command('meetings')
  @Action('meetings')
  async meetings(ctx: Context) {
    const chat = await ctx.getChat();

    await this.bot.telegram.sendMessage(
      chat.id,
      '–°–æ–≤–µ—â–∞–Ω–∏—è: ',
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∫–æ–ª–ª–µ–≥–æ–π`,
            'meetingWithColleague',
          ),
        ],
        [Markup.button.callback('–û–±—â–µ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ', 'requestMeeting-0')],
        [
          Markup.button.callback(
            `–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å–æ –º–Ω–æ–π —Å–æ–≤–µ—â–∞–Ω–∏–π`,
            'listOfMeetings',
          ),
        ],
        [Markup.button.callback(`–ù–∞–∑–∞–¥`, 'start')],
      ]),
    );
  }

  @Action('meetingWithColleague')
  async meetingWithColleague(ctx: Context) {
    const chat = await ctx.getChat();

    // const collegues: User[] = await this.prisma.user.findMany();
    const users: User[] = await this.prisma.user.findMany({
      orderBy: { name: 'asc' },
    });
    const collegues = users.filter((collegue) => collegue.chatId !== chat.id);

    if (collegues.length) {
      await this.bot.telegram.sendMessage(
        chat.id,
        '–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä: ',
        Markup.inlineKeyboard(
          collegues.map((collegue) =>
            Array(
              Markup.button.callback(
                `${collegue.name}`,
                `requestMeeting-${collegue.chatId}`,
              ),
            ),
          ),
        ),
      );
    } else {
      await this.bot.telegram.sendMessage(chat.id, '–ö–æ–ª–ª–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  }

  @Action(/^requestAddToGeneralMeeting-(\d+)$/)
  async requestAddToGeneralMeeting(ctx: any) {
    const chat = await ctx.getChat();

    const currentMeeting = await this.prisma.meeting.findFirst({
      where: {
        id: this.generalMeet.id,
      },
    });

    if (ctx.match[1] === 0) {
      await this.bot.telegram.sendMessage(
        chat.id,
        `<b>–°–æ–≤–µ—â–∞–Ω–∏–µ ${currentMeeting.start_time.toLocaleDateString('ru-RU', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })} –≤ ${currentMeeting.start_time.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        })}</b>
          \n<b>–¢–µ–º–∞</b>: ${currentMeeting.topic}
          \n<b>C—Å—ã–ª–∫–∞</b>: <a href="${currentMeeting.join_url}">üîó</a>`,
        { parse_mode: 'HTML' },
      );
      return;
    }

    this.requestMeetToChatId = ctx.match[1];

    const currentUser = await this.prisma.user.findFirst({
      where: {
        chatId: Number(this.requestMeetToChatId),
      },
    });

    if (currentMeeting) {
      await this.zoomService.editMeet({
        meetingId: this.generalMeet.id,
        userIDs: [...currentMeeting.userIDs, currentUser.id],
      });

      await this.bot.telegram.sendMessage(
        chat.id,
        `${currentUser.name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É ${currentMeeting.topic}`,
      );

      await this.bot.telegram.sendMessage(
        currentUser.chatId,
        `<b>–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ ${currentMeeting.start_time.toLocaleDateString(
          'ru-RU',
          {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          },
        )} –≤ ${currentMeeting.start_time.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        })}</b>
        \n<b>–¢–µ–º–∞</b>: ${currentMeeting.topic}
        \n<b>C—Å—ã–ª–∫–∞</b>: <a href="${currentMeeting.join_url}">üîó</a>`,
        { parse_mode: 'HTML' },
      );
    }
  }

  @Action('getLinkGeneralMeeting')
  async getLinkGeneralMeeting(ctx: any) {
    const chat = await ctx.getChat();

    const currentMeeting = await this.prisma.meeting.findFirst({
      where: {
        id: this.generalMeet.id,
      },
    });

    await this.bot.telegram.sendMessage(
      chat.id,
      `<b>–°–æ–≤–µ—â–∞–Ω–∏–µ ${currentMeeting.start_time.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })} –≤ ${currentMeeting.start_time.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      })}</b>
        \n<b>–¢–µ–º–∞</b>: ${currentMeeting.topic}
        \n<b>C—Å—ã–ª–∫–∞</b>: <a href="${currentMeeting.join_url}">üîó</a>`,
      { parse_mode: 'HTML' },
    );
    return;
  }

  @Action(/^requestMeeting-(\d+)$/)
  async requestMeeting(ctx: any) {
    const chat = await ctx.getChat();

    if (ctx.match[1] === '0') {
      await this.bot.telegram.sendMessage(
        chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –æ–±—â–µ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è: ',
      );

      this.requestMeetFrom = chat;
      this.isGeneralMeetingTheme = true;
    } else {
      await this.bot.telegram.sendMessage(
        chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É —Å–æ–≤–µ—â–∞–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–æ–π: ',
      );

      this.isMeetingTheme = true;

      this.requestMeetToChatId = ctx.match[1];
    }

    this.bot.on(message(), async (ctx: any) => {
      const chat = await ctx.getChat();
      if (this.isMeetingTheme) {
        this.meetingTheme = ctx.update.message.text;

        await this.bot.telegram.sendMessage(
          chat.id,
          `–¢–µ–º–∞ –¥–ª—è —Å–æ–≤–µ—â–∞–Ω–∏—è ${this.meetingTheme}`,
        );

        this.isMeetingTheme = false;

        await this.bot.telegram.sendMessage(
          chat.id,
          '–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 27 –º–∞—Ä—Ç–∞ 12:00',
        );

        this.isFirstRequest = true;
        return;
      } else if (this.isFirstRequest) {
        this.rawDate = ctx.update.message.text;

        try {
          const dateTimeArr = this.rawDate.split(' ');
          const timeArr = dateTimeArr[2].split(':');

          const days_in_month =
            32 -
            new Date(
              new Date().getFullYear(),
              this.monthArr.indexOf(dateTimeArr[1]),
              32,
            ).getDate();

          if (days_in_month < Number(dateTimeArr[0])) {
            await this.bot.telegram.sendMessage(
              this.requestMeetFrom.id,
              `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞`,
            );
            return;
          }

          if (Number(timeArr[0]) > 23 || Number(timeArr[1]) > 59) {
            await this.bot.telegram.sendMessage(
              this.requestMeetFrom.id,
              `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏`,
            );
            return;
          }

          this.readableDate = new Date(
            Number(new Date().getFullYear()),
            Number(this.monthArr.indexOf(dateTimeArr[1])),
            Number(dateTimeArr[0]),
          ).setHours(Number(timeArr[0]) + 3, Number(timeArr[1]));
        } catch (e) {
          await this.bot.telegram.sendMessage(chat.id, `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã`);
          return;
        }
        if (this.readableDate < Number(new Date())) {
          await this.bot.telegram.sendMessage(chat.id, `–î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞`);
          return;
        } else {
          this.requestMeetFrom = chat;

          await this.bot.telegram.sendMessage(
            chat.id,
            `–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `,
            Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  `Zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è`,
                  `sendRequestToOpponent`,
                ),
              ],
              [Markup.button.callback(`–õ–∏—á–Ω–æ`, `requestOfflineMeeting`)],
            ]),
          );
        }
        this.isFirstRequest = false;
        return;
      } else if (this.isSecondRequest) {
        this.rawDate = ctx.update.message.text;

        try {
          const dateTimeArr = this.rawDate.split(' ');
          const timeArr = dateTimeArr[2].split(':');

          const days_in_month =
            32 -
            new Date(
              new Date().getFullYear(),
              this.monthArr.indexOf(dateTimeArr[1]),
              32,
            ).getDate();

          if (days_in_month < Number(dateTimeArr[0])) {
            await this.bot.telegram.sendMessage(
              this.requestMeetToChatId,
              `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞`,
            );
            return;
          }

          if (Number(timeArr[0]) > 23 || Number(timeArr[1]) > 59) {
            await this.bot.telegram.sendMessage(
              this.requestMeetToChatId,
              `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏`,
            );
            return;
          }

          this.readableDate = new Date(
            Number(new Date().getFullYear()),
            Number(this.monthArr.indexOf(dateTimeArr[1])),
            Number(dateTimeArr[0]),
          ).setHours(Number(timeArr[0]) + 3, Number(timeArr[1]));
        } catch (e) {
          await this.bot.telegram.sendMessage(chat.id, `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã`);
          return;
        }

        if (this.readableDate < Number(new Date())) {
          await this.bot.telegram.sendMessage(chat.id, `–î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞`);
          return;
        } else {
          await this.bot.telegram.sendMessage(
            this.requestMeetFrom.id,
            `–í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—Ä–µ–º—è ${this.rawDate}`,
            Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  `–ü—Ä–∏–Ω—è—Ç—å`,
                  `${
                    this.isOfflineMeeting
                      ? 'createOfflineMeeting'
                      : 'createMeeting'
                  }`,
                ),
              ],
              [
                Markup.button.callback(
                  `–û—Ç–∫–ª–æ–Ω–∏—Ç—å`,
                  `rejectMeeting-${this.requestMeetFrom.id}`,
                ),
              ],
            ]),
          );
        }

        this.isSecondRequest = false;
        this.isOfflineMeeting = false;
      } else {
        const users: User[] = await this.prisma.user.findMany({
          orderBy: { name: 'asc' },
        });

        let collegues = users.filter((collegue) => collegue.chatId !== chat.id);

        collegues.push({
          id: '0',
          name: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
          chatId: 0,
          meetingIDs: [],
        });

        if (this.isGeneralMeetingTheme) {
          this.generalMeetingTheme = ctx.update.message.text;

          await this.bot.telegram.sendMessage(
            this.requestMeetFrom.id,
            `–¢–µ–º–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è ${this.generalMeetingTheme}`,
          );

          this.isGeneralMeetingTheme = false;

          await this.bot.telegram.sendMessage(
            this.requestMeetFrom.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –æ–±—â–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 27 –º–∞—Ä—Ç–∞ 12:00',
          );

          this.isGeneralMeetingDate = true;
          return;
        } else if (this.isGeneralMeetingDate) {
          this.rawDate = ctx.update.message.text;

          try {
            const dateTimeArr = this.rawDate.split(' ');
            const timeArr = dateTimeArr[2].split(':');
            const days_in_month =
              32 -
              new Date(
                new Date().getFullYear(),
                this.monthArr.indexOf(dateTimeArr[1]),
                32,
              ).getDate();

            if (days_in_month < Number(dateTimeArr[0])) {
              await this.bot.telegram.sendMessage(
                this.requestMeetFrom.id,
                `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞`,
              );
              return;
            }

            if (Number(timeArr[0]) > 23 || Number(timeArr[1]) > 59) {
              await this.bot.telegram.sendMessage(
                this.requestMeetFrom.id,
                `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏`,
              );
              return;
            }

            this.readableDate = new Date(
              Number(new Date().getFullYear()),
              Number(this.monthArr.indexOf(dateTimeArr[1])),
              Number(dateTimeArr[0]),
            ).setHours(Number(timeArr[0]) + 3, Number(timeArr[1]));
          } catch (e) {
            await this.bot.telegram.sendMessage(
              this.requestMeetFrom.id,
              `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã`,
            );
            return;
          }
          if (this.readableDate < Number(new Date())) {
            await this.bot.telegram.sendMessage(
              this.requestMeetFrom.id,
              `–î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞`,
            );
            return;
          } else {
            const newMeet = await this.zoomService.newMeeting({
              start_time: this.readableDate,
              userChatIds: [this.requestMeetFrom.id],
              topic: this.generalMeetingTheme,
            });

            this.generalMeet = newMeet;
            this.isGeneralMeetingDate = false;

            if (collegues.length) {
              await this.bot.telegram.sendMessage(
                this.requestMeetFrom.id,
                '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–≥ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ: ',
                Markup.inlineKeyboard(
                  collegues.map((collegue) =>
                    Array(
                      Markup.button.callback(
                        `${collegue.name}`,
                        `${
                          collegue.id === '0'
                            ? `getLinkGeneralMeeting`
                            : `requestAddToGeneralMeeting-${collegue.chatId}`
                        }`,
                      ),
                    ),
                  ),
                ),
              );
            } else {
              await this.bot.telegram.sendMessage(
                this.requestMeetFrom.id,
                '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç',
              );
            }
          }
        }
      }
      this.isFirstRequest = false;
      this.isSecondRequest = false;
      this.isMeetingTheme = false;
    });
  }

  @Action('sendRequestToOpponent')
  async sendRequestToOpponent(ctx: any) {
    const chat = await ctx.getChat();

    const chatFrom = await this.prisma.user.findFirst({
      where: {
        chatId: this.requestMeetFrom.id,
      },
    });

    await this.bot.telegram.sendMessage(
      this.requestMeetToChatId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
        chatFrom ? chatFrom.name : this.requestMeetFrom.username
      } –ø—Ä–æ—Å–∏—Ç zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ${this.rawDate}`,
      Markup.inlineKeyboard([
        [Markup.button.callback(`–ü—Ä–∏–Ω—è—Ç—å`, `createMeeting`)],
        [
          Markup.button.callback(
            `–û—Ç–∫–ª–æ–Ω–∏—Ç—å`,
            `rejectMeeting-${this.requestMeetFrom.id}`,
          ),
        ],
        [
          Markup.button.callback(
            `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è`,
            `requestAnotherTime`,
          ),
        ],
      ]),
    );

    await this.bot.telegram.sendMessage(
      chat.id,
      `–ó–∞–ø—Ä–æ—Å zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
    );
  }

  @Action('requestOfflineMeeting')
  async requestOfflineMeeting(ctx: any) {
    const chat = await ctx.getChat();

    this.isOfflineMeeting = true;

    const nameFrom = await this.prisma.user.findFirst({
      where: {
        chatId: this.requestMeetFrom.id,
      },
    });

    await this.bot.telegram.sendMessage(
      this.requestMeetToChatId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
        nameFrom ? nameFrom.name : this.requestMeetFrom.username
      } –ø—Ä–æ—Å–∏—Ç –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É ${this.rawDate}`,
      Markup.inlineKeyboard([
        [Markup.button.callback(`–ü—Ä–∏–Ω—è—Ç—å`, `createOfflineMeeting`)],
        [
          Markup.button.callback(
            `–û—Ç–∫–ª–æ–Ω–∏—Ç—å`,
            `rejectMeeting-${this.requestMeetFrom.id}`,
          ),
        ],
        [
          Markup.button.callback(
            `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è`,
            `requestAnotherTime`,
          ),
        ],
      ]),
    );

    await this.bot.telegram.sendMessage(
      chat.id,
      `–ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
    );
  }

  @Action('createMeeting')
  async createMeeting(ctx: any) {
    const chat = await ctx.getChat();

    const newMeet = await this.zoomService.newMeeting({
      start_time: this.readableDate,
      userChatIds: [
        Number(this.requestMeetToChatId),
        Number(this.requestMeetFrom.id),
      ],
      topic: this.meetingTheme,
    });

    const oneHour = 60 * 60 * 1000;
    const timeToRemind =
      this.readableDate - 3 * oneHour - Number(new Date()) - oneHour;

    try {
      if (2147483647 > timeToRemind) {
        setTimeout(async () => {
          await this.bot.telegram.sendMessage(
            this.requestMeetToChatId,
            `–î–æ —Å–æ–≤–µ—â–∞–Ω–∏—è –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å. \n${newMeet.join_url}`,
          );
        }, timeToRemind);
        console.log('set timeout');
      } else {
        console.log('too long for meeeting');
      }
    } catch (e) {
      console.log('problem with timeout');
    }

    await this.bot.telegram.sendMessage(
      this.requestMeetToChatId,
      `–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ:\n${newMeet.join_url}`,
    );

    await this.bot.telegram.sendMessage(
      this.requestMeetFrom.id,
      `–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ:\n${newMeet.join_url}`,
    );
    return;
  }

  @Action('createOfflineMeeting')
  async createOfflineMeeting(ctx: any) {
    const chat = await ctx.getChat();

    const userFrom = await this.prisma.user.findFirst({
      where: {
        chatId: Number(this.requestMeetFrom.id),
      },
    });

    const userTo = await this.prisma.user.findFirst({
      where: {
        chatId: Number(this.requestMeetToChatId),
      },
    });

    const data = {
      start_time: new Date(this.readableDate).toISOString(),
      userIDs: [userFrom.id, userTo.id],
      topic: this.meetingTheme,
    };

    const newMeet = await this.prisma.meeting.create({ data });

    const oneHour = 60 * 60 * 1000;
    const timeToRemind =
      this.readableDate - 3 * oneHour - Number(new Date()) - oneHour;

    try {
      if (2147483647 > timeToRemind) {
        setTimeout(async () => {
          await this.bot.telegram.sendMessage(
            this.requestMeetToChatId,
            `–î–æ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç–µ–º—É ${newMeet.topic} –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å.`,
          );
        }, timeToRemind);
        console.log('set timeout');
      } else {
        console.log('too long for meeeting');
      }
    } catch (e) {
      console.log('problem with timeout');
    }

    await this.bot.telegram.sendMessage(
      this.requestMeetToChatId,
      `–í—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`,
    );

    await this.bot.telegram.sendMessage(
      this.requestMeetFrom.id,
      `–í—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`,
    );
  }

  @Action(/^rejectMeeting-(\d+)$/)
  async rejectMeeting(ctx: any) {
    const chat = await ctx.getChat();

    const adresser = ctx.match[1];

    await this.bot.telegram.sendMessage(adresser, '–í –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ');
    await this.bot.telegram.sendMessage(chat.id, '–í –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ');
    return;
  }

  @Action('requestAnotherTime')
  async requestAnotherTime(ctx: any) {
    const chat = await ctx.getChat();

    await this.bot.telegram.sendMessage(
      chat.id,
      '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 27 –º–∞—Ä—Ç–∞ 12:00',
    );

    this.isSecondRequest = true;
    return;
  }

  @Action('listOfMeetings')
  async listOfMeetings(ctx: any) {
    const chat = await ctx.getChat();

    const currentUser = await this.prisma.user.findFirst({
      where: { chatId: chat.id },
    });

    const userMeetings = await this.prisma.meeting.findMany({
      where: {
        userIDs: { hasSome: currentUser.id },
        start_time: { gt: new Date() },
      },
      orderBy: {
        start_time: 'asc',
      },
    });

    if (userMeetings.length === 0) {
      await this.bot.telegram.sendMessage(chat.id, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—â–∞–Ω–∏–π`);
      return;
    }

    await this.bot.telegram.sendMessage(
      chat.id,
      `–£ –≤–∞—Å ${userMeetings.length} —Å–æ–≤–µ—â–∞–Ω–∏–π: `,
    );

    let message: string = '';

    for (const [index, meeting] of userMeetings.entries()) {
      let opponentNamesString: string = '';

      for (const userID of meeting.userIDs) {
        const opponent = await this.prisma.user.findFirst({
          where: {
            id: userID,
          },
        });
        if (opponent && opponent.chatId !== chat.id) {
          opponentNamesString = opponentNamesString + `${opponent?.name}, `;
        }
      }

      message =
        message +
        `${
          index + 1
        }) <b>–°–æ–≤–µ—â–∞–Ω–∏–µ c ${opponentNamesString} ${meeting.start_time.toLocaleDateString(
          'ru-RU',
          {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          },
        )} –≤ ${meeting.start_time.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        })}</b>
          \n–¢–µ–º–∞: ${meeting.topic}
          \n${
            meeting.join_url
              ? `C—Å—ã–ª–∫–∞: <a href="${meeting.join_url}">üîó</a>`
              : '–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞'
          }\n\n\n`;
    }

    await this.bot.telegram.sendMessage(chat.id, message, {
      parse_mode: 'HTML',
    });
  }

  @Command('adddeal')
  @Command('projectstatus')
  @Command('getstorage')
  @Action('getStorage')
  @Action('getProjectStatus')
  @Action('addIntegrator')
  @Action('addAgent')
  @Action('addDealer')
  @Action('addIntegration')
  @Action('addCorporate')
  @Action('addPartial')
  @Action('addDeal')
  async inProgress(ctx: Context) {
    const chat = await ctx.getChat();

    await this.bot.telegram.sendMessage(chat.id, '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  }
}
